{% extends 'base.jinja2' %}
{% from 'components/profile_card.jinja2' import profile_card with context %}

{% block title %}{{ profile.username }} - {% endblock %}

{% block css %}
<style>
  .ui.header {
    margin-top: 0;
  }
  .ui.right.button {
    position: absolute;
    top: 0;
    right: 0;
  }
  .section {
    margin-top: 3em;
    margin-bottom: 1em;
    position: relative;
  }
</style>
{% endblock %}

{% block page_header %}{{ username_display(profile, additional_class="bold") }}{% endblock %}

{% block content %}

  <div class="ui stackable grid">

    <div class="eleven wide column">
      {# rating changes #}


    {% if rating_changes %}
      <div id="rating-changes"></div>
    {% else %}
      <p>TA 没有参加任何积分比赛。</p>
    {% endif %}

      <div class="section">
        <h2 class="ui header">近期博客</h2>
        <a href="{{ url('blog:index', profile.pk) }}" class="ui right primary basic button">更多</a>

        <table class="ui center aligned table">
          <thead>
          <tr>
            <th>标题</th>
            <th>创建</th>
            <th>更新</th>
          </tr>
          </thead>
          <tbody>
          {% for blog in blogs %}
            <tr>
              <td><a href="{{ url('blog:detail', blog.pk) }}">{{ blog.title }}</a></td>
              <td>{{ blog.create_time | naturaltime }}</td>
              <td>{{ blog.edit_time | naturaltime }}</td>
            </tr>
          {% endfor %}
          </tbody>
        </table>
      </div>


      <div class="section">
        <h2 class="ui header">近期比赛</h2>
        <a href="{{ url('contest:list') }}" class="ui right primary basic button">更多</a>

        <table class="ui center aligned table">
          <thead>
          <tr>
            <th>#</th>
            <th>标题</th>
            <th>时间</th>
            <th>得分</th>
            <th>排名</th>
          </tr>
          </thead>
          <tbody>
          {% for c in contests %}
            <tr>
              <td>{{ c.contest.id }}</td>
              <td><a href="{{ url('contest:dashboard', c.contest.id) }}">{{ c.contest.title }}</a></td>
              <td>{{ c.contest.start_time | naturaltime }}</td>
              <td>{{ c.score }}</td>
              <td>{% if c.star %}*{% else %}{{ c.rank }}{% endif %}</td>
            </tr>
          {% endfor %}
          </tbody>
        </table>
      </div>


      <div class="section">
        <h2 class="ui header">近期作业</h2>

        <table class="ui center aligned table">
          <thead>
          <tr>
            <th>#</th>
            <th>标题</th>
            <th>最后提交</th>
            <th>得分</th>
            <th>注册</th>
          </tr>
          </thead>
          <tbody>
          {% for c in gyms %}
            <tr>
              <td>{{ c.contest.id }}</td>
              <td><a href="{{ url('contest:dashboard', c.contest.id) }}">{{ c.contest.title }}</a></td>
              <td>{% if c.last_submission %}{{ c.last_submission.create_time | naturaltime }}{% endif %}</td>
              <td>{{ c.score }}</td>
              <td>{{ c.comment }}</td>
            </tr>
          {% endfor %}
          </tbody>
        </table>

      </div>

    </div>

    <div class="five wide column">
      {{ profile_card(profile, solved) }}
    </div>

  </div>

  <div class="section">
    <h2 class="ui header">近一年的提交</h2>

    <div id="heatmap"></div>

  </div>


  <div class="section">
    <h2 class="ui header">题目集中的提交</h2>
    <a href="{{ url('problem:status') }}?user={{ profile.pk }}" class="ui right primary basic button">查看所有提交</a>

    <table class="ui center aligned table">
      <thead>
      <tr>
        <th>题目</th>
        <th>运行编号</th>
        <th>时间</th>
        <th>语言</th>
        <th>CPU</th>
      </tr>
      </thead>
      <tbody>
      {% for submission in submissions %}
        <tr>
          <td><a href="{{ url('problem:detail', submission.problem_id) }}">{{ submission.problem }}</a></td>
          <td><a href="{{ url('problem:submission', submission.problem_id, submission.id) }}">{{ submission.id }}</a>
          </td>
          <td>{{ submission.create_time | naturaltime }}</td>
          <td>{% if submission.lang %}{{ submission.get_lang_display() }}{% else %}N/A{% endif %}</td>
          <td>{{ submission.get_time_display() }}</td>
        </tr>
      {% endfor %}
      </tbody>
    </table>
  </div>

{% endblock %}


{% block script %}
  <script src="/static/node_modules/@antv/g2/dist/g2.min.js"></script>
  <script src="/static/node_modules/@antv/data-set/dist/data-set.min.js"></script>
  <script type="text/javascript">
    const theme = G2.Util.deepMix({
      fontFamily: "'Open Sans','Helvetica Neue','PingFang SC','Hiragino Sans GB','Microsoft YaHei','Hiragino Kaku Gothic Pro',Meiryo,'Malgun Gothic',Arial,Helvetica,sans-serif"
    }, G2.Theme);
    G2.Global.setTheme(theme);

    function renderRatingChanges() {

      {% if rating_changes %}
        const data = [
          {time: "{{ profile.date_joined | date('Y-m-d H:i') }}", rating: 1500, comment: "Joined EOJ"},
            {% for rating in rating_changes %}{ time: "{{ rating.modified | date('Y-m-d H:i') }}", rating:
              {{ rating.rating }}, comment: "{{ rating.contest.title }}" },{% endfor %}];
        const chart = new G2.Chart({
          container: 'rating-changes',
          forceFit: true,
          height: 400,
          padding: [20, "auto", 50, "auto"]
        });
        chart.source(data);
        chart.scale('rating', {
          type: 'linear',
          min: {{ min_rating }},
          max: {{ max_rating }}
        });
        chart.scale('time', {
          range: [0, 1],
          type: 'time'
        });
        chart.axis('rating').axis('time');
        chart.tooltip({
          crosshairs: {
            type: 'line'
          },
          position: 'top',
          inPlot: false,
          title: 'comment'
        });
        chart.area().position('time*rating*comment');
        chart.line().position('time*rating*comment');
        chart.point().position('time*rating*comment').size(4).shape('circle').style({
          stroke: '#fff',
          lineWidth: 1
        });
        chart.render();

      {% endif %}
    }

    function renderHeatmap() {
      var Shape = G2.Shape;
      var Util = G2.Util;
      Shape.registerShape('polygon', 'boundary-polygon', {
        draw: function draw(cfg, container) {
          if (!Util.isEmpty(cfg.points)) {
            var attrs = {
              stroke: '#fff',
              lineWidth: 1,
              fill: cfg.color,
              fillOpacity: cfg.opacity
            };
            var points = cfg.points;
            var path = [['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['Z']];
            attrs.path = this.parsePath(path);
            var polygon = container.addShape('path', {
              attrs: attrs
            });

            if (cfg.origin._origin.lastWeek) {
              var linePath = [['M', points[2].x, points[2].y], ['L', points[3].x, points[3].y]];
              container.addShape('path', {
                zIndex: 1,
                attrs: {
                  path: this.parsePath(linePath),
                  lineWidth: 1,
                  stroke: '#777777'
                }
              });
              if (cfg.origin._origin.lastDay) {
                container.addShape('path', {
                  zIndex: 1,
                  attrs: {
                    path: this.parsePath([['M', points[1].x, points[1].y], ['L', points[2].x, points[2].y]]),
                    lineWidth: 1,
                    stroke: '#777777'
                  }
                });
              }
            }
            container.sort();
            return polygon;
          }
        }
      });

      const data = {{ heatmap | safe }};
      const weekToMonth = {{ week_to_month | safe }};
      var chartHeight = $("#heatmap").width() / 7;
      var chart = new G2.Chart({
        container: 'heatmap',
        forceFit: true,
        height: chartHeight,
        padding: [20, 20, 20, 80]
      });
      chart.source(data, {
        day: {
          type: 'cat',
          values: ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN']
        },
        week: {
          type: 'cat'
        },
        submissions: {
          sync: true
        }
      });

      chart.axis('week', false);
      /*
      chart.axis('week', {
        position: 'top',
        tickLine: null,
        line: null,
        label: {
          offset: 12,
          textStyle: {
            fontSize: 12,
            fill: '#666',
            textBaseline: 'top'
          },
          formatter: function formatter(val) {
            if (weekToMonth.hasOwnProperty(val)) {
              return ["", "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"][weekToMonth[val]];
            } else {
              return "";
            }
          }
        }
      });
      */
      chart.axis('day', {
        grid: null
      });
      chart.legend(false);
      chart.tooltip({
        title: 'date'
      });
      chart.coord().reflect('y');
      chart.polygon().position('week*day*date').color('submissions', '#F3F9FE-#ABD4FF-#7BBCFF-#1387FF-#00458D-#00356D').shape('boundary-polygon');
      chart.render();
    }

    renderRatingChanges();
    renderHeatmap();

  </script>
{% endblock %}