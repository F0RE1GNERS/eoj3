# Generated by Django 2.2.9 on 2020-02-04 02:11

from django.conf import settings
import django.core.files.storage
from django.db import migrations, models
import django.db.models.deletion
import polygon.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('problem', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=24, validators=[polygon.models.NameValidator()], verbose_name='助记符')),
                ('file', models.FileField(storage=django.core.files.storage.FileSystemStorage(location='/eoj3/repo'), upload_to='assets/%Y%m%d/', verbose_name='文件')),
                ('real_path', models.CharField(blank=True, max_length=192)),
                ('create_time', models.DateTimeField()),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('parent_id', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fingerprint', models.CharField(default='invalid', max_length=64, verbose_name='指纹')),
                ('input_file', models.FileField(storage=django.core.files.storage.FileSystemStorage(location='/eoj3/repo'), upload_to='cases/%Y%m%d/', verbose_name='输入文件')),
                ('output_file', models.FileField(storage=django.core.files.storage.FileSystemStorage(location='/eoj3/repo'), upload_to='cases/%Y%m%d/', verbose_name='输出文件')),
                ('in_samples', models.BooleanField(default=False, verbose_name='加入样例')),
                ('in_pretests', models.BooleanField(default=False, verbose_name='加入 Pretests')),
                ('points', models.PositiveIntegerField(default=10, verbose_name='分值')),
                ('output_lock', models.BooleanField(default=False, verbose_name='锁定输出内容')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('case_number', models.PositiveIntegerField(default=1, verbose_name='测试点编号')),
                ('create_time', models.DateTimeField()),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('activated', models.BooleanField(default=True, verbose_name='加入测试数据')),
                ('parent_id', models.IntegerField(default=0)),
                ('group', models.PositiveIntegerField(default=0, verbose_name='分组编号')),
            ],
        ),
        migrations.CreateModel(
            name='Package',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=24, validators=[polygon.models.NameValidator()], verbose_name='名称')),
                ('lang', models.CharField(choices=[('cpp', 'C++11'), ('cc14', 'C++14'), ('java', 'Java'), ('python', 'Python')], default='cc14', max_length=12, verbose_name='语言')),
                ('code', models.TextField(blank=True, verbose_name='代码')),
                ('tag', models.CharField(choices=[('checker', '输出校验'), ('interactor', '交互程序'), ('generator', '生成器'), ('validator', '输入校验'), ('solution_main', '解答 - 标准答案'), ('solution_correct', '解答 - 正确'), ('solution_tle_or_ok', '解答 - 超时或正确'), ('solution_wa', '解答 - 输出答案错误'), ('solution_incorrect', '解答 - 不正确'), ('solution_fail', '解答 - 运行时错误'), ('useless', '没用的')], default='checker', max_length=24, verbose_name='标记为')),
                ('create_time', models.DateTimeField()),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('fingerprint', models.CharField(max_length=64)),
                ('parent_id', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Revision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('revision', models.PositiveIntegerField()),
                ('messages', models.TextField(default='[]')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('time_limit', models.PositiveIntegerField(default=2000, verbose_name='时限 (ms)')),
                ('memory_limit', models.PositiveIntegerField(default=256, verbose_name='内存限制 (MB)')),
                ('well_form_policy', models.BooleanField(default=True, verbose_name='对测试数据中的空白、换行、不可见字符进行自动处理')),
                ('status', models.IntegerField(choices=[(-1, '已终止'), (0, '正在编辑'), (1, '已完成')], default=0, verbose_name='状态')),
                ('parent_id', models.IntegerField(default=0)),
                ('enable_group', models.BooleanField(default=False, verbose_name='启用捆绑测试')),
                ('group_count', models.PositiveIntegerField(default=0, verbose_name='分组数量')),
                ('group_dependencies', models.TextField(blank=True, verbose_name='分组间依赖关系')),
                ('group_points', models.TextField(blank=True, verbose_name='分组分值')),
                ('active_checker', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='checking_revisions', to='polygon.Program')),
                ('active_interactor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='interacting_revisions', to='polygon.Program')),
            ],
        ),
        migrations.CreateModel(
            name='Statement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='default', max_length=24, validators=[polygon.models.NameValidator()], verbose_name='助记符')),
                ('title', models.CharField(max_length=192, verbose_name='题目标题')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('input', models.TextField(blank=True, verbose_name='输入 / 交互约定')),
                ('output', models.TextField(blank=True, verbose_name='输出')),
                ('hint', models.TextField(blank=True, verbose_name='提示')),
                ('create_time', models.DateTimeField()),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('parent_id', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_code', models.TextField(verbose_name='模板代码')),
                ('grader_code', models.TextField(verbose_name='评分代码')),
                ('language', models.CharField(choices=[('c', 'C'), ('cpp', 'C++11'), ('cc14', 'C++14'), ('cc17', 'C++17'), ('py2', 'Python 2'), ('python', 'Python 3'), ('pypy', 'PyPy'), ('pypy3', 'PyPy 3'), ('java', 'Java 8'), ('pas', 'Pascal'), ('text', 'Text')], default='cpp', max_length=12, verbose_name='语言')),
                ('create_time', models.DateTimeField()),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('parent_id', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='CodeforcesPackage',
            fields=[
                ('package_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='polygon.Package')),
                ('dir_name', models.CharField(max_length=64)),
                ('remote_problem_id', models.CharField(max_length=64)),
                ('status', models.IntegerField(choices=[(-1, 'Pending'), (0, 'OK'), (1, 'Failed')], default=-1)),
                ('running_time', models.FloatField(null=True)),
                ('short_name', models.CharField(blank=True, max_length=192, null=True)),
                ('revision', models.IntegerField(null=True)),
                ('size', models.FloatField(null=True)),
            ],
            bases=('polygon.package',),
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abstract', models.TextField(blank=True, max_length=256)),
                ('status', models.IntegerField(choices=[(-3, 'PENDING'), (-2, 'RUNNING'), (-1, 'FAILED'), (0, 'OK'), (1, 'ABORTED')], default=-3)),
                ('report', models.TextField(blank=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('revision', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polygon.Revision')),
            ],
        ),
        migrations.CreateModel(
            name='Run',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('status', models.IntegerField(choices=[(1, 'complete'), (0, 'running'), (-1, 'failed')])),
                ('label', models.TextField(blank=True)),
                ('message', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='revision',
            name='active_statement',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stating_revisions', to='polygon.Statement'),
        ),
        migrations.AddField(
            model_name='revision',
            name='active_validator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='validating_revisions', to='polygon.Program'),
        ),
        migrations.AddField(
            model_name='revision',
            name='assets',
            field=models.ManyToManyField(to='polygon.Asset'),
        ),
        migrations.AddField(
            model_name='revision',
            name='cases',
            field=models.ManyToManyField(to='polygon.Case'),
        ),
        migrations.AddField(
            model_name='revision',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revisions', to='problem.Problem'),
        ),
        migrations.AddField(
            model_name='revision',
            name='programs',
            field=models.ManyToManyField(to='polygon.Program'),
        ),
        migrations.AddField(
            model_name='revision',
            name='statements',
            field=models.ManyToManyField(to='polygon.Statement'),
        ),
        migrations.AddField(
            model_name='revision',
            name='templates',
            field=models.ManyToManyField(to='polygon.Template'),
        ),
        migrations.AddField(
            model_name='revision',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='revision',
            unique_together={('problem', 'revision')},
        ),
        migrations.CreateModel(
            name='FavoriteProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='polygon_problems_favorite_by', to='problem.Problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='polygon_favorite_problems', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'problem')},
            },
        ),
        migrations.CreateModel(
            name='EditSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('fingerprint', models.CharField(max_length=64)),
                ('last_synchronize', models.DateTimeField(blank=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problem.Problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_synchronize'],
                'unique_together': {('user', 'problem')},
            },
        ),
    ]
